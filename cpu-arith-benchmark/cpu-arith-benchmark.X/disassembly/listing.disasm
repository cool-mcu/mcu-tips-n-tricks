Disassembly Listing for cpu-arith-benchmark
Generated From:
/Users/Dennis/Documents/design.projects/thinkific.cool-mcu.com/github/mcu-tips-n-tricks/cpu-arith-benchmark/cpu-arith-benchmark.X/dist/PIC32MZ1024EFH064/debug/cpu-arith-benchmark.X.debug.elf
Aug 22, 2020 9:48:14 AM

---  /Users/Dennis/Documents/design.projects/thinkific.cool-mcu.com/github/mcu-tips-n-tricks/cpu-arith-benchmark/cpu-arith-benchmark.X/main.c
1:                   /*******************************************************************************
2:                    * Copyright (c) 2020 dBm Signal Dynamics Inc.
3:                    * 
4:                    * File:        main.c
5:                    * Project:     cpu-arith-benchmark
6:                    * Compiler:    XC8 v2.20, XC16 v1.60, XC32 v2.41
7:                    * Course:      MCU Tips n' Tricks
8:                    * URL:         https://www.cool-mcu.com/courses/mcu-tips-n-tricks
9:                    * Chapter:     Hardware Tips n Tricks
10:                   * Lesson:      Selecting a Microcontroller
11:                   * 
12:                   * Project uses the simulator stopwatch feature to display
13:                   * cycle-counts for common arithmetic operations on PIC16F1, PIC24F, dsPIC33E, 
14:                   * PIC32MX and PIC32MZ-based MCUs
15:                   * 
16:                   * SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
17:                   * EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
18:                   * MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
19:                   * IN NO EVENT SHALL DBM SIGNAL DYNAMICS OR ITS LICENSORS BE LIABLE OR OBLIGATED
20:                   * UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY,
21:                   * OR OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
22:                   * INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
23:                   * CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
24:                   * SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
25:                   * (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
26:                  *******************************************************************************/
27:                  #include <xc.h>
28:                  #include <stdint.h>
29:                  
30:                  // Global Variables
31:                  int8_t a, b, c;
32:                  int16_t g;
33:                  int32_t d, e, f;
34:                  int64_t h;
35:                  float i, j, k;
36:                  double l, m, n;
37:                  
38:                  // Local Function Prototypes
39:                  int8_t sum8(int8_t a, int8_t b);            // 8-bit integer addition
40:                  int32_t sum32(int32_t a, int32_t b);        // 32-bit integer addition
41:                  int16_t mul8(int8_t a, int8_t b);           // 8x8 integer multiplication
42:                  int64_t mul32(int32_t a, int32_t b);        // 32x32 integer multiplication
43:                  
44:                  int main(void) {
9D0005C8  27BDFFE8   ADDIU SP, SP, -24
9D0005CC  AFBF0014   SW RA, 20(SP)
9D0005D0  AFBE0010   SW FP, 16(SP)
9D0005D4  03A0F021   ADDU FP, SP, ZERO
45:                    
46:                    a = 2;
9D0005D8  24020002   ADDIU V0, ZERO, 2
9D0005DC  A3828045   SB V0, -32699(GP)
47:                    b = 3;
9D0005E0  24020003   ADDIU V0, ZERO, 3
9D0005E4  A3828046   SB V0, -32698(GP)
48:                    c = sum8(a, b);
9D0005E8  83838045   LB V1, -32699(GP)
9D0005EC  83828046   LB V0, -32698(GP)
9D0005F0  00602021   ADDU A0, V1, ZERO
9D0005F4  00402821   ADDU A1, V0, ZERO
9D0005F8  0F4001C5   JAL sum8
9D0005FC  00000000   NOP
9D000600  A3828044   SB V0, -32700(GP)
49:                    g = mul8(a, b);
9D000604  83838045   LB V1, -32699(GP)
9D000608  83828046   LB V0, -32698(GP)
9D00060C  00602021   ADDU A0, V1, ZERO
9D000610  00402821   ADDU A1, V0, ZERO
9D000614  0F4001E3   JAL mul8
9D000618  00000000   NOP
9D00061C  A7828038   SH V0, -32712(GP)
50:                    
51:                    d = 4;
9D000620  24020004   ADDIU V0, ZERO, 4
9D000624  AF82803C   SW V0, -32708(GP)
52:                    e = 5;
9D000628  24020005   ADDIU V0, ZERO, 5
9D00062C  AF828040   SW V0, -32704(GP)
53:                    f = sum32(d, e);
9D000630  8F83803C   LW V1, -32708(GP)
9D000634  8F828040   LW V0, -32704(GP)
9D000638  00602021   ADDU A0, V1, ZERO
9D00063C  00402821   ADDU A1, V0, ZERO
9D000640  0F4001D6   JAL sum32
9D000644  00000000   NOP
9D000648  AF828078   SW V0, -32648(GP)
54:                    h = mul32(d, e);
9D00064C  8F83803C   LW V1, -32708(GP)
9D000650  8F828040   LW V0, -32704(GP)
9D000654  00602021   ADDU A0, V1, ZERO
9D000658  00402821   ADDU A1, V0, ZERO
9D00065C  0F4001F6   JAL mul32
9D000660  00000000   NOP
9D000664  00400013   MTLO V0
9D000668  00600011   MTHI V1
9D00066C  00001012   MFLO V0
9D000670  00001810   MFHI V1
9D000674  AF828070   SW V0, -32656(GP)
9D000678  AF838074   SW V1, -32652(GP)
55:                    
56:                    i = 6.0;
9D00067C  3C029D00   LUI V0, -25344
9D000680  8C420168   LW V0, 360(V0)
9D000684  AF828050   SW V0, -32688(GP)
57:                    j = -7.125;
9D000688  3C029D00   LUI V0, -25344
9D00068C  8C42016C   LW V0, 364(V0)
9D000690  AF828068   SW V0, -32664(GP)
58:                    k = i*j;
9D000694  8F838050   LW V1, -32688(GP)
9D000698  8F828068   LW V0, -32664(GP)
9D00069C  44830000   MTC1 V1, F0
9D0006A0  44820800   MTC1 V0, F1
9D0006A4  46010002   MUL.S F0, F0, F1
9D0006A8  44020000   MFC1 V0, F0
9D0006AC  AF82806C   SW V0, -32660(GP)
59:                    
60:                    l = 6.0;
9D0006B0  3C029D00   LUI V0, -25344
9D0006B4  8C430174   LW V1, 372(V0)
9D0006B8  8C420170   LW V0, 368(V0)
9D0006BC  AF828048   SW V0, -32696(GP)
9D0006C0  AF83804C   SW V1, -32692(GP)
61:                    m = -7.125;
9D0006C4  3C029D00   LUI V0, -25344
9D0006C8  8C43017C   LW V1, 380(V0)
9D0006CC  8C420178   LW V0, 376(V0)
9D0006D0  AF828058   SW V0, -32680(GP)
9D0006D4  AF83805C   SW V1, -32676(GP)
62:                    n = l*m;
9D0006D8  8F848048   LW A0, -32696(GP)
9D0006DC  8F85804C   LW A1, -32692(GP)
9D0006E0  8F828058   LW V0, -32680(GP)
9D0006E4  8F83805C   LW V1, -32676(GP)
9D0006E8  44840000   MTC1 A0, F0
9D0006EC  44E50000   MTHC1 A1, F0
9D0006F0  44820800   MTC1 V0, F1
9D0006F4  44E30800   MTHC1 V1, F1
9D0006F8  46210002   MUL.D F0, F0, F1
9D0006FC  44020000   MFC1 V0, F0
9D000700  44630000   MFHC1 V1, F0
9D000704  AF828060   SW V0, -32672(GP)
9D000708  AF838064   SW V1, -32668(GP)
63:                    
64:                    while(1);
9D00070C  0B4001C3   J 0x9D00070C
9D000710  00000000   NOP
65:                    
66:                  }
67:                  
68:                  
69:                  int8_t sum8(int8_t a, int8_t b) {
9D000714  27BDFFF8   ADDIU SP, SP, -8
9D000718  AFBE0004   SW FP, 4(SP)
9D00071C  03A0F021   ADDU FP, SP, ZERO
9D000720  00801821   ADDU V1, A0, ZERO
9D000724  00A01021   ADDU V0, A1, ZERO
9D000728  A3C30008   SB V1, 8(FP)
9D00072C  A3C2000C   SB V0, 12(FP)
70:                      return (a + b);
9D000730  93C30008   LBU V1, 8(FP)
9D000734  93C2000C   LBU V0, 12(FP)
9D000738  00621021   ADDU V0, V1, V0
9D00073C  304200FF   ANDI V0, V0, 255
9D000740  7C021420   SEB V0, V0
71:                  }
9D000744  03C0E821   ADDU SP, FP, ZERO
9D000748  8FBE0004   LW FP, 4(SP)
9D00074C  27BD0008   ADDIU SP, SP, 8
9D000750  03E00008   JR RA
9D000754  00000000   NOP
72:                  
73:                  int32_t sum32(int32_t a, int32_t b) {
9D000758  27BDFFF8   ADDIU SP, SP, -8
9D00075C  AFBE0004   SW FP, 4(SP)
9D000760  03A0F021   ADDU FP, SP, ZERO
9D000764  AFC40008   SW A0, 8(FP)
9D000768  AFC5000C   SW A1, 12(FP)
74:                    return (a + b);
9D00076C  8FC30008   LW V1, 8(FP)
9D000770  8FC2000C   LW V0, 12(FP)
9D000774  00621021   ADDU V0, V1, V0
75:                  }
9D000778  03C0E821   ADDU SP, FP, ZERO
9D00077C  8FBE0004   LW FP, 4(SP)
9D000780  27BD0008   ADDIU SP, SP, 8
9D000784  03E00008   JR RA
9D000788  00000000   NOP
76:                  
77:                  int16_t mul8(int8_t a, int8_t b) {
9D00078C  27BDFFF8   ADDIU SP, SP, -8
9D000790  AFBE0004   SW FP, 4(SP)
9D000794  03A0F021   ADDU FP, SP, ZERO
9D000798  00801821   ADDU V1, A0, ZERO
9D00079C  00A01021   ADDU V0, A1, ZERO
9D0007A0  A3C30008   SB V1, 8(FP)
9D0007A4  A3C2000C   SB V0, 12(FP)
78:                      return (a * b);
9D0007A8  83C20008   LB V0, 8(FP)
9D0007AC  7C021E20   SEH V1, V0
9D0007B0  83C2000C   LB V0, 12(FP)
9D0007B4  7C021620   SEH V0, V0
9D0007B8  00620018   MULT 0, V1, V0
9D0007BC  00001812   MFLO V1
9D0007C0  7C031620   SEH V0, V1
79:                  }
9D0007C4  03C0E821   ADDU SP, FP, ZERO
9D0007C8  8FBE0004   LW FP, 4(SP)
9D0007CC  27BD0008   ADDIU SP, SP, 8
9D0007D0  03E00008   JR RA
9D0007D4  00000000   NOP
80:                  
81:                  int64_t mul32(int32_t a, int32_t b) {
9D0007D8  27BDFFF8   ADDIU SP, SP, -8
9D0007DC  AFBE0004   SW FP, 4(SP)
9D0007E0  03A0F021   ADDU FP, SP, ZERO
9D0007E4  AFC40008   SW A0, 8(FP)
9D0007E8  AFC5000C   SW A1, 12(FP)
82:                    return (a * b);
9D0007EC  8FC50008   LW A1, 8(FP)
9D0007F0  8FC4000C   LW A0, 12(FP)
9D0007F4  00A40018   MULT 0, A1, A0
9D0007F8  00001012   MFLO V0
9D0007FC  00002812   MFLO A1
9D000800  000527C3   SRA A0, A1, 31
9D000804  00801821   ADDU V1, A0, ZERO
9D000808  00400013   MTLO V0
9D00080C  00600011   MTHI V1
83:                  }
9D000810  00001012   MFLO V0
9D000814  00001810   MFHI V1
9D000818  03C0E821   ADDU SP, FP, ZERO
9D00081C  8FBE0004   LW FP, 4(SP)
9D000820  27BD0008   ADDIU SP, SP, 8
9D000824  03E00008   JR RA
9D000828  00000000   NOP
---  /Applications/microchip/mplabx/v5.40/packs/Microchip/PIC32MZ-EF_DFP/1.2.51/xc32/startup/crt0.S  ----
                                                  1:     /*********************************************************************
                                                  2:      *
                                                  3:      *                  C Runtime Startup
                                                  4:      *
                                                  5:      *********************************************************************
                                                  6:      * Filename:        crt0.S
                                                  7:      *
                                                  8:      * Processor:       PIC32
                                                  9:      *
                                                  10:     * Compiler:        MPLAB XC32
                                                  11:     *                  MPLAB X IDE
                                                  12:     * Company:         Microchip Technology Inc.
                                                  13:     *
                                                  14:     * Software License Agreement
                                                  15:     *
                                                  16:     * Copyright (c) 2014, Microchip Technology Inc. and its subsidiaries ("Microchip")
                                                  17:     * All rights reserved.
                                                  18:     *
                                                  19:     * This software is developed by Microchip Technology Inc. and its
                                                  20:     * subsidiaries ("Microchip").
                                                  21:     *
                                                  22:     * Redistribution and use in source and binary forms, with or without
                                                  23:     * modification, are permitted provided that the following conditions are met:
                                                  24:     *
                                                  25:     * 1.      Redistributions of source code must retain the above copyright
                                                  26:     * notice, this list of conditions and the following disclaimer.
                                                  27:     *
                                                  28:     * 2.      Redistributions in binary form must reproduce the above copyright
                                                  29:     * notice, this list of conditions and the following disclaimer in the
                                                  30:     * documentation and/or other materials provided with the distribution.
                                                  31:     *
                                                  32:     * 3.      Microchip's name may not be used to endorse or promote products
                                                  33:     * derived from this software without specific prior written permission.
                                                  34:     *
                                                  35:     * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED
                                                  36:     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
                                                  37:     * MERCHANTABILITY AND FITNESS FOR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
                                                  38:     * MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                                                  39:     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                                  40:     * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS;
                                                  41:     * OR BUSINESS INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                  42:     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
                                                  43:     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
                                                  44:     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                  45:     *
                                                  46:     ********************************************************************/
                                                  47:    
                                                  48:    #include "xc.h"
                                                  49:    #include <cp0defs.h>
                                                  50:    
                                                  51:    #ifdef __LIBBUILD__
                                                  52:       # Replace the standard debugging information with a simple filename. This
                                                  53:       # prevents the library build directory from showing up in MPLAB IDE. It
                                                  54:       # also effectively disables source-line debugging.
                                                  55:       .file 1 "libpic32/startup/crt0.S"
                                                  56:       .loc 1 0
                                                  57:    #endif
                                                  58:    
                                                  59:    #if (__XC32_VERSION > 1000) && !defined(CPP_INIT)
                                                  60:    #define CPP_INIT
                                                  61:    #endif
                                                  62:    
                                                  63:    #if !defined(PIC32_SRS_SET_COUNT)
                                                  64:    #  if defined(__PIC32_SRS_SET_COUNT)
                                                  65:    #    define PIC32_SRS_SET_COUNT __PIC32_SRS_SET_COUNT
                                                  66:    #  else
                                                  67:    #    warning PIC32_SRS_SET_COUNT not defined on build line
                                                  68:    #    define PIC32_SRS_SET_COUNT 2
                                                  69:    #  endif
                                                  70:    #endif
                                                  71:    
                                                  72:    #if defined(__PIC32MX) || defined(__PIC32MM) || defined(__PIC32MZ)
                                                  73:    #define INIT_DATA 1
                                                  74:    #endif
                                                  75:    
                                                  76:    /* This file contains 32-bit assembly code */
                                                  77:           .set nomips16
                                                  78:    
                                                  79:            ##################################################################
                                                  80:            # Entry point of the entire application
                                                  81:            ##################################################################
                                                  82:            .section .reset,code,keep
                                                  83:            .align 2
                                                  84:            .set noreorder
                                                  85:            .ent _reset
                                                  86:    
                                                  87:    ############################
                                                  88:    # Begin ISA switching code #
                                                  89:    ############################
                                                  90:    
                                                  91:    #if defined (__mips_micromips)
                                                  92:            .set micromips
                                                  93:    #endif
                                                  94:    
                                                  95:    #if (defined(__PIC32_HAS_MICROMIPS)) && (defined(__PIC32_HAS_MIPS32R2))
                                                  96:    _reset:
                                                  97:            .word 0x10000003     /* MIPS32:    branch forward 0x10 bytes from here  */
                                                  98:                                 /* MicroMIPS: ADDI32 $0, $0, 0x0007 (nop)          */
                                                  99:                                 /* DO NOT change the relative branch               */
                                                  100:   
                                                  101:           .word 0x00000000     /* NOP */
                                                  102:   __reset_micromips_isa:
                                                  103:           .set    micromips
BFC00008  0006F3F0   TGE ZERO, A2                 104:           jal     _startup
BFC0000C  00000000   NOP                          105:           nop
                                                  106:   
                                                  107:           .align 2
                                                  108:           /* Device not in proper ISA mode */
                                                  109:           .set nomicromips
                                                  110:   __reset_switch_isa:
BFC00010  0FF00006   JAL 0xBFC00018               111:           jal _startup
BFC00014  00000000   NOP                          112:           nop
                                                  113:   
                                                  114:   #else
                                                  115:   
                                                  116:   _reset:
                                                  117:           jal _startup
                                                  118:           nop
                                                  119:   
                                                  120:   #endif  /* __PIC32_HAS_MICROMIPS */
                                                  121:   
                                                  122:           .align 2
                                                  123:           .end _reset
                                                  124:           .globl _reset
                                                  125:           .size _reset, .-_reset
                                                  126:   
                                                  127:           .section .reset.startup,code,keep
                                                  128:           .align 2
                                                  129:           .set noreorder
                                                  130:   
                                                  131:   #if defined (__mips_micromips)
                                                  132:           .set micromips
                                                  133:   #else
                                                  134:           .set nomicromips
                                                  135:   #endif
                                                  136:   
                                                  137:   ############################
                                                  138:   # End ISA switching code   #
                                                  139:   ############################
                                                  140:   
                                                  141:           ##################################################################
                                                  142:           # Startup code
                                                  143:           ##################################################################
                                                  144:           .align 2
                                                  145:           .globl _startup
                                                  146:           .set noreorder
                                                  147:           .ent _startup
                                                  148:   _startup:
                                                  149:           ##################################################################
                                                  150:           # If entered because of an NMI, jump to the NMI handler.
                                                  151:           ##################################################################
BFC00018  401A6000   MFC0 K0, Status              152:           mfc0    k0,_CP0_STATUS
BFC0001C  7F5A04C0   EXT K0, K0, 19, 1            153:           ext     k0,k0,19,1              # Extract NMI bit
BFC00020  13400005   BEQ K0, ZERO, 0xBFC00038     154:           beqz    k0,_no_nmi
BFC00024  00000000   NOP                          155:           nop
BFC00028  3C1A9D00   LUI K0, -25344               156:           la      k0,_nmi_handler
BFC00030  03400008   JR K0                        157:           jr      k0
BFC00034  00000000   NOP                          158:           nop
                                                  159:   _no_nmi:
                                                  160:   
                                                  161:           ##################################################################
                                                  162:           # Initialize Stack Pointer
                                                  163:           #   _stack is initialized by the linker script to point to the
                                                  164:           #    starting location of the stack in DRM
                                                  165:           ##################################################################
BFC00038  3C1D8008   LUI SP, -32760               166:           la      sp,_stack
                                                  167:   
                                                  168:           ##################################################################
                                                  169:           # Initialize Global Pointer
                                                  170:           #   _gp is initialized by the linker script to point to "middle"
                                                  171:           #   of the small variables region
                                                  172:           ##################################################################
BFC00040  3C1C8001   LUI GP, -32767               173:           la      gp,_gp
                                                  174:   
                                                  175:   #if (PIC32_SRS_SET_COUNT == 2)
                                                  176:           ##################################################################
                                                  177:           # Initialize Global Pointer in Shadow Set
                                                  178:           #   The SRSCtl's PSS field must be set to the shadow set in which
                                                  179:           #   to initialize the global pointer.  Since we have only a
                                                  180:           #   single shadow set (besides the normal), we will initialize
                                                  181:           #   SRSCtl<PSS> to SRSCtl<HSS>.  We then write the global pointer
                                                  182:           #   to the previous shadow set to ensure that on interrupt, the
                                                  183:           #   global pointer has been initialized.
                                                  184:           ##################################################################
                                                  185:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
                                                  186:           add     t3,t1,zero              # Save off current SRSCtl
                                                  187:           ext     t2,t1,26,4              # to obtain HSS field
                                                  188:           ins     t1,t2,6,4               # Put HSS field
                                                  189:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
                                                  190:           ehb                             # Clear hazard before using new SRSCTL
                                                  191:           wrpgpr  gp,gp                   # Set global pointer in PSS
                                                  192:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
                                                  193:           ehb
                                                  194:   
                                                  195:   #elif (PIC32_SRS_SET_COUNT > 2)
                                                  196:           ##################################################################
                                                  197:           # Initialize Global Pointer in Shadow Set(s)
                                                  198:           #   The SRSCtl PSS field must be set to the shadow set in which
                                                  199:           #   to initialize the global pointer.  We will initialize
                                                  200:           #   SRSCtl<PSS> to the number of reg sets and work down to set zero.
                                                  201:           #   We write the global pointer to the previous shadow set to
                                                  202:           #   ensure that on interrupt, the global pointer has been
                                                  203:           #   initialized.
                                                  204:           ##################################################################
BFC00048  40096002   MFC0 T1, SRSCtl              205:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
BFC0004C  01205820   ADD T3, T1, ZERO             206:           add     t3,t1,zero              # Save off current SRSCtl
                                                  207:   
BFC00050  240A0007   ADDIU T2, ZERO, 7            208:           li      t2,(PIC32_SRS_SET_COUNT-1)
                                                  209:   
BFC00054  7D494984   INS T1, T2, 6, 4             210:   1:      ins     t1,t2,6,4               # Put next shadow set field
BFC00058  40896002   MTC0 T1, SRSCtl              211:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
BFC0005C  000000C0   EHB                          212:           ehb                             # Clear hazard before using new SRSCTL
BFC00060  41DCE000   WRPGPR GP, GP                213:           wrpgpr  gp,gp                   # Set global pointer in PSS
                                                  214:   
BFC00064  254AFFFF   ADDIU T2, T2, -1             215:           addiu   t2,t2,-1                # Next lower shadow set
                                                  216:                                           # Loop for all sets
BFC00068  1540FFFA   BNE T2, ZERO, 0xBFC00054     217:           bne     t2,$0,1b                # Down to zero (normal GPR set)
BFC0006C  00000000   NOP                          218:           nop
                                                  219:   
BFC00070  408B6002   MTC0 T3, SRSCtl              220:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
BFC00074  000000C0   EHB                          221:           ehb
                                                  222:   
                                                  223:   #endif /* (PIC32_SRS_SET_COUNT > 2) */
                                                  224:   
                                                  225:           ##################################################################
                                                  226:           # Call the "on reset" procedure
                                                  227:           ##################################################################
BFC00078  3C089D00   LUI T0, -25344               228:           la      t0,_on_reset
BFC00080  0100F809   JALR T0                      229:           jalr    t0
BFC00084  00000000   NOP                          230:           nop
                                                  231:   
                                                  232:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  233:           ##################################################################
                                                  234:           # Initialize TLB for fixed mapping to EBI and SQI
                                                  235:           ##################################################################
                                                  236:           .extern __pic32_tlb_init_ebi_sqi
BFC00088  3C089D00   LUI T0, -25344               237:           la      t0,__pic32_tlb_init_ebi_sqi
BFC00090  0100F809   JALR T0                      238:           jalr    t0
BFC00094  00000000   NOP                          239:           nop
                                                  240:   #endif
                                                  241:   
                                                  242:           ##################################################################
                                                  243:           # Clear uninitialized data sections
                                                  244:           ##################################################################
                                                  245:   _start_bss_init:
BFC00098  3C088000   LUI T0, -32768               246:           la      t0,_bss_begin
BFC000A0  3C098000   LUI T1, -32768               247:           la      t1,_bss_end
BFC000A8  10000003   BEQ ZERO, ZERO, 0xBFC000B8   248:           b       _bss_check
BFC000AC  00000000   NOP                          249:           nop
                                                  250:   
                                                  251:   _bss_init:
BFC000B0  AD000000   SW ZERO, 0(T0)               252:           sw      zero,0x0(t0)
BFC000B4  25080004   ADDIU T0, T0, 4              253:           addu    t0,4
                                                  254:   _bss_check:
BFC000B8  0109082B   SLTU AT, T0, T1              255:           bltu    t0,t1,_bss_init
BFC000C0  00000000   NOP                          256:           nop
                                                  257:   
                                                  258:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  259:           ##################################################################
                                                  260:           # Initialize L1 cache. This must be done after bss clearing
                                                  261:           # since the _bss_end symbol may not be cache-line aligned.
                                                  262:           ##################################################################
                                                  263:           .extern   __pic32_init_cache
BFC000C4  3C08BFC0   LUI T0, -16448               264:           la      t0,__pic32_init_cache
BFC000CC  0100F809   JALR T0                      265:           jalr    t0
BFC000D0  00000000   NOP                          266:           nop
                                                  267:   #endif
                                                  268:   
                                                  269:   #if defined(INIT_DATA) || defined(__PIC32_HAS_INIT_DATA)
                                                  270:   
                                                  271:   #if defined(__LIBBUILD__) /* Prebuilt crt0.o file */
                                                  272:   
                                                  273:           ##################################################################
                                                  274:           # Initialize data using the linker-generated .dinit table
                                                  275:           # For use with XC32 versions prior to XC32 v2.10 only.
                                                  276:           ##################################################################
                                                  277:           .equiv FMT_CLEAR,0
                                                  278:           .equiv FMT_COPY,1
                                                  279:   _dinit_init:
                                                  280:           la      t0,_dinit_addr
                                                  281:   
                                                  282:   #define SRC t0
                                                  283:   #define DST t1
                                                  284:   #define LEN t2
                                                  285:   #define FMT t3
                                                  286:   
                                                  287:   0:      lw      DST,0(SRC)
                                                  288:           beqz    DST,9f
                                                  289:           addu    SRC,4
                                                  290:           lw      LEN,0(SRC)
                                                  291:           addu    SRC,4
                                                  292:           lw      FMT,0(SRC)
                                                  293:           beq     FMT,$0,_dinit_clear
                                                  294:           addu    SRC,4
                                                  295:   
                                                  296:   _dinit_copy:
                                                  297:           lbu     t4,0(SRC)
                                                  298:           subu    LEN,1
                                                  299:           addu    SRC,1
                                                  300:           sb      t4,0(DST)
                                                  301:           bne     LEN,$0,_dinit_copy
                                                  302:           addu    DST,1
                                                  303:   
                                                  304:           b       _dinit_end
                                                  305:           nop
                                                  306:   
                                                  307:   _dinit_clear:
                                                  308:           sb      $0,(DST)
                                                  309:           subu    LEN,1
                                                  310:           bne     LEN,$0,_dinit_clear
                                                  311:           addu    DST,1
                                                  312:   
                                                  313:   _dinit_end:
                                                  314:           addu    SRC,3
                                                  315:           addiu   LEN,$0,-4
                                                  316:           and     SRC,LEN,SRC
                                                  317:           lw      DST,0(SRC)
                                                  318:           bne     DST,$0,0b
                                                  319:           nop
                                                  320:   9:
                                                  321:   
                                                  322:   #else
                                                  323:           #####################################################################
                                                  324:           # Initialize data using the linker-generated .dinit table
                                                  325:           # XC32 v2.10 and later provide the data-init code in a separate file
                                                  326:           # packaged with the compiler rather than the DFP. Use that init
                                                  327:           # code instead.
                                                  328:           #####################################################################
                                                  329:           .extern   __pic32_data_init
BFC000D4  3C089D00   LUI T0, -25344               330:           la      t0, __pic32_data_init
BFC000DC  0100F809   JALR T0                      331:           jalr    t0
BFC000E0  00000000   NOP                          332:           nop
                                                  333:   #endif /* __LIBBUILD__ */
                                                  334:   
                                                  335:   #endif /* INIT_DATA */
                                                  336:   
                                                  337:           ##################################################################
                                                  338:           # If there are no RAM functions, skip the next section --
                                                  339:           # initializing bus matrix registers.
                                                  340:           ##################################################################
BFC000E4  3C090000   LUI T1, 0                    341:           la      t1,_ramfunc_begin
BFC000EC  11200001   BEQ T1, ZERO, 0xBFC000F4     342:           beqz    t1,_ramfunc_done
BFC000F0  00000000   NOP                          343:           nop
                                                  344:   
                                                  345:   #if defined(INIT_SSX) || defined(__PIC32_HAS_SSX)
                                                  346:     /* No initialization required */
                                                  347:   #else /* Use BMX */
                                                  348:           ##################################################################
                                                  349:           # Initialize bus matrix registers if RAM functions exist in the
                                                  350:           # application
                                                  351:           ##################################################################
                                                  352:           la      t1,_bmxdkpba_address
                                                  353:           la      t2,BMXDKPBA
                                                  354:           sw      t1,0(t2)
                                                  355:           la      t1,_bmxdudba_address
                                                  356:           la      t2,BMXDUDBA
                                                  357:           sw      t1,0(t2)
                                                  358:           la      t1,_bmxdupba_address
                                                  359:           la      t2,BMXDUPBA
                                                  360:           sw      t1,0(t2)
                                                  361:   #endif /* INIT_SSX */
                                                  362:   
                                                  363:   _ramfunc_done:
                                                  364:   
                                                  365:           ##################################################################
                                                  366:           # Initialize CP0 registers
                                                  367:           ##################################################################
                                                  368:           # Initialize Count register
                                                  369:           ##################################################################
BFC000F4  40804800   MTC0 ZERO, Count             370:           mtc0    zero,_CP0_COUNT
                                                  371:   
                                                  372:           ##################################################################
                                                  373:           # Initialize Compare register
                                                  374:           ##################################################################
BFC000F8  240AFFFF   ADDIU T2, ZERO, -1           375:           li      t2,-1
BFC000FC  408A5800   MTC0 T2, Compare             376:           mtc0    t2,_CP0_COMPARE
                                                  377:   
                                                  378:           ##################################################################
                                                  379:           # Ensure BEV set and Initialize EBase register
                                                  380:           ##################################################################
BFC00100  3C080040   LUI T0, 64                   381:           li      t0, (1<<22)
BFC00104  400A6000   MFC0 T2, Status              382:           mfc0    t2,_CP0_STATUS
BFC00108  010A5025   OR T2, T0, T2                383:           or      t2,t0,t2               # Set BEV bit 22
BFC0010C  408A6000   MTC0 T2, Status              384:           mtc0    t2,_CP0_STATUS
                                                  385:   
BFC00110  3C099D00   LUI T1, -25344               386:           la      t1,_ebase_address
BFC00118  000000C0   EHB                          387:           ehb
BFC0011C  40897801   MTC0 T1, EBase               388:           mtc0    t1,_CP0_EBASE
                                                  389:           
                                                  390:           ##################################################################
                                                  391:           # Initialize PRISS register to a safer default for devices that 
                                                  392:           # have it. The application should re-initialize it to an
                                                  393:           # application-specific value.
                                                  394:           #
                                                  395:           # We do NOT do this by default.
                                                  396:           ##################################################################
                                                  397:   #if defined(USE_DEFAULT_PRISS_VALUE) 
                                                  398:   #if defined(_PRISS_PRI7SS_POSITION)
                                                  399:   #if (PIC32_SRS_SET_COUNT >= 7)
                                                  400:           li	    t2, 0x76540000
                                                  401:           addiu	t2, t2, 0x3210
                                                  402:           lui	    t1, %hi(PRISS)
                                                  403:           sw	    t2, %lo(PRISS)(t1)
                                                  404:   #elif (PIC32_SRS_SET_COUNT <= 2)
                                                  405:           li	    t2, 0x10000000
                                                  406:           lui	    t1, %hi(PRISS)
                                                  407:           sw	    t2, %lo(PRISS)(t1)
                                                  408:   #endif /* PIC32_SRS_SET_COUNT */
                                                  409:   #endif /* _PRISS_PRI7SS_POSITION */
                                                  410:   #endif /* USE_DEFAULT_PRISS_VALUE */
                                                  411:           
                                                  412:           ##################################################################
                                                  413:           # Initialize IntCtl/INTCON.VS register with _vector_spacing
                                                  414:           ##################################################################
BFC00120  3C090000   LUI T1, 0                    415:           la      t1,_vector_spacing
                                                  416:   #if defined(INIT_INTCONVS) || defined(__PIC32_HAS_INTCONVS)
                                                  417:           la      t0, INTCON
                                                  418:           lw      t2, 0(t0)
                                                  419:           li      t2, 0
                                                  420:           ins     t2, t1, 16, 7
                                                  421:   #if defined(__PIC32MM) && defined(_INTCON_MVEC_MASK)
                                                  422:           ori     t2, t2, _INTCON_MVEC_MASK
                                                  423:   #endif
                                                  424:           sw      t2, 0(t0)
                                                  425:   #endif
BFC00128  240A0000   ADDIU T2, ZERO, 0            426:           li      t2,0                    # Clear t2 and
BFC0012C  7D2A4944   INS T2, T1, 5, 5             427:           ins     t2,t1,5,5               # shift value to VS field
BFC00130  408A6001   MTC0 T2, IntCtl              428:           mtc0    t2,_CP0_INTCTL
                                                  429:   
                                                  430:           ##################################################################
                                                  431:           # Initialize CAUSE registers
                                                  432:           # - Enable counting of Count register <DC = 0>
                                                  433:           # - Use special exception vector <IV = 1>
                                                  434:           # - Clear pending software interrupts <IP1:IP0 = 0>
                                                  435:           ##################################################################
BFC00134  3C090080   LUI T1, 128                  436:           li      t1,0x00800000
BFC00138  40896800   MTC0 T1, Cause               437:           mtc0    t1,_CP0_CAUSE
                                                  438:   
                                                  439:           ##################################################################
                                                  440:           # Initialize STATUS register
                                                  441:           # - Access to Coprocessor 0 not allowed in user mode <CU0 = 0>
                                                  442:           # - User mode uses configured endianness <RE = 0>
                                                  443:           # - Preserve Bootstrap Exception vectors <BEV>
                                                  444:           # - Preserve soft reset <SR> and non-maskable interrupt <NMI>
                                                  445:           # - CorExtend enabled based on whether CorExtend User Defined
                                                  446:           #   Instructions have been implemented <CEE = Config<UDI>>
                                                  447:           # - Disable any pending interrupts <IM7..IM2 = 0, IM1..IM0 = 0>
                                                  448:           # - Disable hardware interrupts <IPL7:IPL2 = 0>
                                                  449:           # - Base mode is Kernel mode <UM = 0>
                                                  450:           # - Error level is normal <ERL = 0>
                                                  451:           # - Exception level is normal <EXL = 0>
                                                  452:           # - Interrupts are disabled <IE = 0>
                                                  453:           # - DSPr2 ASE is enabled for devices that support it <MX = 1>
                                                  454:           # - FPU64 is enabled for devices that support it <CU1=1> & <FR=1>
                                                  455:           ##################################################################
BFC0013C  40088000   MFC0 T0, Config              456:           mfc0    t0,_CP0_CONFIG
BFC00140  7D090580   EXT T1, T0, 22, 1            457:           ext     t1,t0,22,1              # Extract UDI from Config register
BFC00144  00094C40   SLL T1, T1, 17               458:           sll     t1,t1,17                # Move UDI to Status.CEE location
BFC00148  40086000   MFC0 T0, Status              459:           mfc0    t0,_CP0_STATUS
BFC0014C  3C010058   LUI AT, 88                   460:           and     t0,t0,0x00580000        # Preserve SR, NMI, and BEV
                                                  461:   #if defined(INIT_DSPR2) || defined(__PIC32_HAS_DSPR2)
BFC00154  3C0A0100   LUI T2, 256                  462:           li      t2, 0x01000000          # Set the Status.MX bit to enable DSP
BFC00158  01484025   OR T0, T2, T0                463:           or      t0,t2,t0
                                                  464:   #endif
                                                  465:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
BFC0015C  3C0A2400   LUI T2, 9216                 466:           li      t2, 0x24000000          # Set the Status.CU1 and Status.FR bits to
BFC00160  01484025   OR T0, T2, T0                467:           or      t0,t2,t0                # enable the FPU in FR64 mode
                                                  468:   #endif
                                                  469:   
BFC00164  01284025   OR T0, T1, T0                470:           or      t0,t1,t0                # Include Status.CEE (from UDI)
BFC00168  40886000   MTC0 T0, Status              471:           mtc0    t0,_CP0_STATUS
                                                  472:           
                                                  473:   #if defined(PIC32WK) && defined(_CP0_CONFIG3) && defined (__mips_micromips)
                                                  474:           # Ensure that the ISAONEXEC bit is set for the microMIPS ISA for the PIC32WK family
                                                  475:           # _bsc0 (_CP0_CONFIG3, _CP0_CONFIG3_SELECT, ISAONEXEC_MASK)
                                                  476:           li      t1,0x10000              # ISAONEXEC bit
                                                  477:           mfc0    t0,_CP0_CONFIG3
                                                  478:           or      t1,t0,t1
                                                  479:           mtc0    t1,_CP0_CONFIG3
                                                  480:   
                                                  481:   #endif /* PIC32WK && __mips_micromips */
                                                  482:   
                                                  483:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
                                                  484:                                           # FPU Control and Status
BFC0016C  3C0A0100   LUI T2, 256                  485:           li      t2,0x1000000            # FCSR: RM=0, FS=1, FO=0, FN=0
                                                  486:                                           # Enables: 0b00000 E=1, V=0, Z=0, O=0, U=0, I=0
BFC00170  44CAF800   CTC1 T2, F31                 487:           ctc1    t2, $31                 # High perf on denormal operands & tiny results
                                                  488:   #endif
BFC00174  000000C0   EHB                          489:           ehb
                                                  490:   
                                                  491:           ##################################################################
                                                  492:           # Call the "on bootstrap" procedure
                                                  493:           ##################################################################
BFC00178  3C089D00   LUI T0, -25344               494:           la      t0,_on_bootstrap
BFC00180  0100F809   JALR T0                      495:           jalr    t0
BFC00184  00000000   NOP                          496:           nop
                                                  497:   
                                                  498:           ##################################################################
                                                  499:           # Initialize Status<BEV> for normal exception vectors
                                                  500:           ##################################################################
BFC00188  40086000   MFC0 T0, Status              501:           mfc0    t0,_CP0_STATUS
BFC0018C  3C01FFBF   LUI AT, -65                  502:           and     t0,t0,0xffbfffff        # Clear BEV
BFC00198  40886000   MTC0 T0, Status              503:           mtc0    t0,_CP0_STATUS
                                                  504:   
                                                  505:           ##################################################################
                                                  506:           # Call main. We do this via a thunk in the text section so that
                                                  507:           # a normal jump and link can be used, enabling the startup code
                                                  508:           # to work properly whether main is written in MIPS16 or MIPS32
                                                  509:           # code. I.e., the linker will correctly adjust the JAL to JALX if
                                                  510:           # necessary
                                                  511:           ##################################################################
BFC0019C  30840000   ANDI A0, A0, 0               512:           and     a0,a0,0
BFC001A0  30A50000   ANDI A1, A1, 0               513:           and     a1,a1,0
BFC001A4  3C089D00   LUI T0, -25344               514:           la      t0,_main_entry
BFC001AC  01000008   JR T0                        515:           jr      t0
BFC001B0  00000000   NOP                          516:           nop
                                                  517:   
                                                  518:           .end _startup
                                                  519:   
                                                  520:           ##################################################################
                                                  521:           # Boot Exception Vector Handler
                                                  522:           # Jumps to _bootstrap_exception_handler
                                                  523:           ##################################################################
                                                  524:           .section .bev_handler,code,keep
                                                  525:           .align 2
                                                  526:           .set noreorder
                                                  527:           .ent _bev_exception
                                                  528:   _bev_exception:
BFC00380  3C1A9D00   LUI K0, -25344               529:           la        k0,_bootstrap_exception_handler
BFC00388  03400008   JR K0                        530:           jr        k0
BFC0038C  00000000   NOP                          531:           nop
                                                  532:   
                                                  533:           .end _bev_exception
                                                  534:   
                                                  535:           ##################################################################
                                                  536:           # General Exception Vector Handler
                                                  537:           # Jumps to _general_exception_context
                                                  538:           ##################################################################
                                                  539:           .section .gen_handler,code
                                                  540:           .align 2
                                                  541:           .set noreorder
                                                  542:           .ent _gen_exception
                                                  543:   _gen_exception:
9D000180  3C1A9D00   LUI K0, -25344               544:   0:      la      k0,_general_exception_context
9D000188  03400008   JR K0                        545:           jr      k0
9D00018C  00000000   NOP                          546:           nop
                                                  547:   
                                                  548:           .end _gen_exception
                                                  549:   
                                                  550:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  551:           ##################################################################
                                                  552:           # Simple TLB-Refill Exception Vector
                                                  553:           # Jumps to _simple_tlb_refill_exception_context
                                                  554:           ##################################################################
                                                  555:           .section .simple_tlb_refill_vector,code,keep
                                                  556:           .align 2
                                                  557:           .set noreorder
                                                  558:           .ent simple_tlb_refill_vector
                                                  559:   simple_tlb_refill_vector:
9D000000  3C1A9D00   LUI K0, -25344               560:           la      k0,_simple_tlb_refill_exception_context
9D000008  03400008   JR K0                        561:           jr      k0
9D00000C  00000000   NOP                          562:           nop
                                                  563:   
                                                  564:           .end simple_tlb_refill_vector
                                                  565:   #endif
                                                  566:   
                                                  567:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  568:           ##################################################################
                                                  569:           # Cache-Error Exception Vector Handler
                                                  570:           # Jumps to _cache_err_exception_context
                                                  571:           ##################################################################
                                                  572:           .section .cache_err_vector,code,keep
                                                  573:           .align 2
                                                  574:           .set noreorder
                                                  575:           .ent _cache_err_vector
                                                  576:   _cache_err_vector:
9D000100  3C1A9D00   LUI K0, -25344               577:           la      k0,_cache_err_exception_context
9D000108  03400008   JR K0                        578:           jr      k0
9D00010C  00000000   NOP                          579:           nop
                                                  580:   
                                                  581:           .end _cache_err_vector
                                                  582:   #endif
                                                  583:   
                                                  584:           .section .text.main_entry,code,keep
                                                  585:           .align 2
                                                  586:           .ent _main_entry
                                                  587:   _main_entry:
                                                  588:   
                                                  589:   #if defined(CPP_INIT)
                                                  590:           .weak _init
                                                  591:           # call .init section to run constructors etc
9D000110  3C040000   LUI A0, 0                    592:           lui	a0,%hi(_init)
9D000114  27BDFFE8   ADDIU SP, SP, -24            593:           addiu	sp,sp,-24
9D000118  24840000   ADDIU A0, A0, 0              594:           addiu	a0,a0,%lo(_init)
9D00011C  10800003   BEQ A0, ZERO, 0x9D00012C     595:           beq	a0,$0,2f
9D000120  AFBF0014   SW RA, 20(SP)                596:           sw	$31,20(sp)	 #,
9D000124  0080F809   JALR A0                      597:           jalr	a0
9D000128  00000000   NOP                          598:           nop
                                                  599:   2:
                                                  600:   #endif
9D00012C  30840000   ANDI A0, A0, 0               601:           and     a0,a0,0
9D000130  30A50000   ANDI A1, A1, 0               602:           and     a1,a1,0
                                                  603:   
                                                  604:           ##################################################################
                                                  605:   
                                                  606:           # Call main
                                                  607:           ##################################################################
9D000134  3C089D00   LUI T0, -25344               608:           la    	t0,main
9D00013C  0100F809   JALR T0                      609:           jalr 	t0
9D000140  00000000   NOP                          610:           nop
                                                  611:   
                                                  612:   #if defined(CALL_EXIT)
                                                  613:           ##################################################################
                                                  614:           # Call exit()
                                                  615:           ##################################################################
                                                  616:           jal exit
                                                  617:           nop
                                                  618:   #endif
                                                  619:   
                                                  620:           ##################################################################
                                                  621:           # Just in case, go into infinite loop
                                                  622:           # Call a software breakpoint only with -mdebugger compiler option
                                                  623:           ##################################################################
                                                  624:           .weak __exception_handler_break
                                                  625:   __crt0_exit:
                                                  626:   1:
9D000144  3C029D00   LUI V0, -25344               627:           la      v0,__exception_handler_break
9D00014C  10400003   BEQ V0, ZERO, 0x9D00015C     628:           beq     v0,0,0f
9D000150  00000000   NOP                          629:           nop
9D000154  0040F809   JALR V0                      630:           jalr    v0
9D000158  00000000   NOP                          631:           nop
                                                  632:   
9D00015C  1000FFF9   BEQ ZERO, ZERO, 0x9D000144   633:   0:      b       1b
9D000160  00000000   NOP                          634:           nop
                                                  635:   
                                                  636:           .globl __crt0_exit
                                                  637:           .end _main_entry
